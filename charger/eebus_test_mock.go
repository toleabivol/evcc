// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/enbility/cemd/emobility (interfaces: EmobilityI)
//
// Generated by this command:
//
//	mockgen -package charger -destination eebus_test_mock.go github.com/enbility/cemd/emobility EmobilityI
//

// Package charger is a generated GoMock package.
package charger

import (
	reflect "reflect"

	emobility "github.com/enbility/cemd/emobility"
	gomock "go.uber.org/mock/gomock"
)

// MockEmobilityI is a mock of EmobilityI interface.
type MockEmobilityI struct {
	ctrl     *gomock.Controller
	recorder *MockEmobilityIMockRecorder
}

// MockEmobilityIMockRecorder is the mock recorder for MockEmobilityI.
type MockEmobilityIMockRecorder struct {
	mock *MockEmobilityI
}

// NewMockEmobilityI creates a new mock instance.
func NewMockEmobilityI(ctrl *gomock.Controller) *MockEmobilityI {
	mock := &MockEmobilityI{ctrl: ctrl}
	mock.recorder = &MockEmobilityIMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEmobilityI) EXPECT() *MockEmobilityIMockRecorder {
	return m.recorder
}

// EVChargeStrategy mocks base method.
func (m *MockEmobilityI) EVChargeStrategy() emobility.EVChargeStrategyType {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EVChargeStrategy")
	ret0, _ := ret[0].(emobility.EVChargeStrategyType)
	return ret0
}

// EVChargeStrategy indicates an expected call of EVChargeStrategy.
func (mr *MockEmobilityIMockRecorder) EVChargeStrategy() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EVChargeStrategy", reflect.TypeOf((*MockEmobilityI)(nil).EVChargeStrategy))
}

// EVChargedEnergy mocks base method.
func (m *MockEmobilityI) EVChargedEnergy() (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EVChargedEnergy")
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EVChargedEnergy indicates an expected call of EVChargedEnergy.
func (mr *MockEmobilityIMockRecorder) EVChargedEnergy() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EVChargedEnergy", reflect.TypeOf((*MockEmobilityI)(nil).EVChargedEnergy))
}

// EVCommunicationStandard mocks base method.
func (m *MockEmobilityI) EVCommunicationStandard() (emobility.EVCommunicationStandardType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EVCommunicationStandard")
	ret0, _ := ret[0].(emobility.EVCommunicationStandardType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EVCommunicationStandard indicates an expected call of EVCommunicationStandard.
func (mr *MockEmobilityIMockRecorder) EVCommunicationStandard() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EVCommunicationStandard", reflect.TypeOf((*MockEmobilityI)(nil).EVCommunicationStandard))
}

// EVConnected mocks base method.
func (m *MockEmobilityI) EVConnected() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EVConnected")
	ret0, _ := ret[0].(bool)
	return ret0
}

// EVConnected indicates an expected call of EVConnected.
func (mr *MockEmobilityIMockRecorder) EVConnected() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EVConnected", reflect.TypeOf((*MockEmobilityI)(nil).EVConnected))
}

// EVConnectedPhases mocks base method.
func (m *MockEmobilityI) EVConnectedPhases() (uint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EVConnectedPhases")
	ret0, _ := ret[0].(uint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EVConnectedPhases indicates an expected call of EVConnectedPhases.
func (mr *MockEmobilityIMockRecorder) EVConnectedPhases() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EVConnectedPhases", reflect.TypeOf((*MockEmobilityI)(nil).EVConnectedPhases))
}

// EVCoordinatedChargingSupported mocks base method.
func (m *MockEmobilityI) EVCoordinatedChargingSupported() (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EVCoordinatedChargingSupported")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EVCoordinatedChargingSupported indicates an expected call of EVCoordinatedChargingSupported.
func (mr *MockEmobilityIMockRecorder) EVCoordinatedChargingSupported() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EVCoordinatedChargingSupported", reflect.TypeOf((*MockEmobilityI)(nil).EVCoordinatedChargingSupported))
}

// EVCurrentChargeState mocks base method.
func (m *MockEmobilityI) EVCurrentChargeState() (emobility.EVChargeStateType, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EVCurrentChargeState")
	ret0, _ := ret[0].(emobility.EVChargeStateType)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EVCurrentChargeState indicates an expected call of EVCurrentChargeState.
func (mr *MockEmobilityIMockRecorder) EVCurrentChargeState() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EVCurrentChargeState", reflect.TypeOf((*MockEmobilityI)(nil).EVCurrentChargeState))
}

// EVCurrentLimits mocks base method.
func (m *MockEmobilityI) EVCurrentLimits() ([]float64, []float64, []float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EVCurrentLimits")
	ret0, _ := ret[0].([]float64)
	ret1, _ := ret[1].([]float64)
	ret2, _ := ret[2].([]float64)
	ret3, _ := ret[3].(error)
	return ret0, ret1, ret2, ret3
}

// EVCurrentLimits indicates an expected call of EVCurrentLimits.
func (mr *MockEmobilityIMockRecorder) EVCurrentLimits() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EVCurrentLimits", reflect.TypeOf((*MockEmobilityI)(nil).EVCurrentLimits))
}

// EVCurrentsPerPhase mocks base method.
func (m *MockEmobilityI) EVCurrentsPerPhase() ([]float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EVCurrentsPerPhase")
	ret0, _ := ret[0].([]float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EVCurrentsPerPhase indicates an expected call of EVCurrentsPerPhase.
func (mr *MockEmobilityIMockRecorder) EVCurrentsPerPhase() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EVCurrentsPerPhase", reflect.TypeOf((*MockEmobilityI)(nil).EVCurrentsPerPhase))
}

// EVEnergyDemand mocks base method.
func (m *MockEmobilityI) EVEnergyDemand() (emobility.EVDemand, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EVEnergyDemand")
	ret0, _ := ret[0].(emobility.EVDemand)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EVEnergyDemand indicates an expected call of EVEnergyDemand.
func (mr *MockEmobilityIMockRecorder) EVEnergyDemand() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EVEnergyDemand", reflect.TypeOf((*MockEmobilityI)(nil).EVEnergyDemand))
}

// EVGetIncentiveConstraints mocks base method.
func (m *MockEmobilityI) EVGetIncentiveConstraints() emobility.EVIncentiveSlotConstraints {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EVGetIncentiveConstraints")
	ret0, _ := ret[0].(emobility.EVIncentiveSlotConstraints)
	return ret0
}

// EVGetIncentiveConstraints indicates an expected call of EVGetIncentiveConstraints.
func (mr *MockEmobilityIMockRecorder) EVGetIncentiveConstraints() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EVGetIncentiveConstraints", reflect.TypeOf((*MockEmobilityI)(nil).EVGetIncentiveConstraints))
}

// EVGetPowerConstraints mocks base method.
func (m *MockEmobilityI) EVGetPowerConstraints() emobility.EVTimeSlotConstraints {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EVGetPowerConstraints")
	ret0, _ := ret[0].(emobility.EVTimeSlotConstraints)
	return ret0
}

// EVGetPowerConstraints indicates an expected call of EVGetPowerConstraints.
func (mr *MockEmobilityIMockRecorder) EVGetPowerConstraints() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EVGetPowerConstraints", reflect.TypeOf((*MockEmobilityI)(nil).EVGetPowerConstraints))
}

// EVIdentification mocks base method.
func (m *MockEmobilityI) EVIdentification() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EVIdentification")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EVIdentification indicates an expected call of EVIdentification.
func (mr *MockEmobilityIMockRecorder) EVIdentification() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EVIdentification", reflect.TypeOf((*MockEmobilityI)(nil).EVIdentification))
}

// EVLoadControlObligationLimits mocks base method.
func (m *MockEmobilityI) EVLoadControlObligationLimits() ([]float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EVLoadControlObligationLimits")
	ret0, _ := ret[0].([]float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EVLoadControlObligationLimits indicates an expected call of EVLoadControlObligationLimits.
func (mr *MockEmobilityIMockRecorder) EVLoadControlObligationLimits() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EVLoadControlObligationLimits", reflect.TypeOf((*MockEmobilityI)(nil).EVLoadControlObligationLimits))
}

// EVOptimizationOfSelfConsumptionSupported mocks base method.
func (m *MockEmobilityI) EVOptimizationOfSelfConsumptionSupported() (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EVOptimizationOfSelfConsumptionSupported")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EVOptimizationOfSelfConsumptionSupported indicates an expected call of EVOptimizationOfSelfConsumptionSupported.
func (mr *MockEmobilityIMockRecorder) EVOptimizationOfSelfConsumptionSupported() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EVOptimizationOfSelfConsumptionSupported", reflect.TypeOf((*MockEmobilityI)(nil).EVOptimizationOfSelfConsumptionSupported))
}

// EVPowerPerPhase mocks base method.
func (m *MockEmobilityI) EVPowerPerPhase() ([]float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EVPowerPerPhase")
	ret0, _ := ret[0].([]float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EVPowerPerPhase indicates an expected call of EVPowerPerPhase.
func (mr *MockEmobilityIMockRecorder) EVPowerPerPhase() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EVPowerPerPhase", reflect.TypeOf((*MockEmobilityI)(nil).EVPowerPerPhase))
}

// EVSoC mocks base method.
func (m *MockEmobilityI) EVSoC() (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EVSoC")
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EVSoC indicates an expected call of EVSoC.
func (mr *MockEmobilityIMockRecorder) EVSoC() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EVSoC", reflect.TypeOf((*MockEmobilityI)(nil).EVSoC))
}

// EVSoCSupported mocks base method.
func (m *MockEmobilityI) EVSoCSupported() (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EVSoCSupported")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EVSoCSupported indicates an expected call of EVSoCSupported.
func (mr *MockEmobilityIMockRecorder) EVSoCSupported() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EVSoCSupported", reflect.TypeOf((*MockEmobilityI)(nil).EVSoCSupported))
}

// EVWriteIncentives mocks base method.
func (m *MockEmobilityI) EVWriteIncentives(arg0 []emobility.EVDurationSlotValue) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EVWriteIncentives", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// EVWriteIncentives indicates an expected call of EVWriteIncentives.
func (mr *MockEmobilityIMockRecorder) EVWriteIncentives(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EVWriteIncentives", reflect.TypeOf((*MockEmobilityI)(nil).EVWriteIncentives), arg0)
}

// EVWriteLoadControlLimits mocks base method.
func (m *MockEmobilityI) EVWriteLoadControlLimits(arg0, arg1 []float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EVWriteLoadControlLimits", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// EVWriteLoadControlLimits indicates an expected call of EVWriteLoadControlLimits.
func (mr *MockEmobilityIMockRecorder) EVWriteLoadControlLimits(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EVWriteLoadControlLimits", reflect.TypeOf((*MockEmobilityI)(nil).EVWriteLoadControlLimits), arg0, arg1)
}

// EVWritePowerLimits mocks base method.
func (m *MockEmobilityI) EVWritePowerLimits(arg0 []emobility.EVDurationSlotValue) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EVWritePowerLimits", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// EVWritePowerLimits indicates an expected call of EVWritePowerLimits.
func (mr *MockEmobilityIMockRecorder) EVWritePowerLimits(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EVWritePowerLimits", reflect.TypeOf((*MockEmobilityI)(nil).EVWritePowerLimits), arg0)
}
